from fastapi import FastAPI, UploadFile
import uuid
import whisper
import pinecone
import openai
from langchain.embeddings import OpenAIEmbeddings

# אתחול pinecone
pinecone.init(api_key="pcsk_PiBhL_HqbSJ8iZm38SV6nPZQEobLvKXV5DLetfU1HQkT7TqFkptPMaqvdhReUh4AUfbLj",environment="us-west1-gcp")
index = pinecone.Index("musicfiles")

# אתחול Whisper (תמלול)
model_whisper = whisper.load_model("base")
# אתחול OpenAI
openai_api_key="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"
# תמלול קובץ שמע
def transcribe_audio(file_path):
    result = model_whisper.transcribe(file_path)
    return result["text"]

# שליחה למודל NLP להסרת מילים שאינן חלק מהשיר (למשל דיבור חיצוני)
def extract_lyrics(raw_text):
    prompt = f"""
    הנה טקסט מתוך הקלטה של שיר. השאר רק את מילות השיר, הסר דיבורים חיצוניים:
    ---
    {raw_text}
    ---
    """
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}]
    )
    return response["choices"][0]["message"]["content"].strip()

# ניתוח רגשות, מחשבות ורצונות
def analyze_song_content(lyrics):
    prompt = f"""
    נתח את השיר הבא והצג את הרגשות, המחשבות והרצונות שהוא מבטא:
    ---
    {lyrics}
    """
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}]
    )
    return response["choices"][0]["message"]["content"].strip()

# יצירת embedding
openai_embeddings = OpenAIEmbeddings(openai_api_key=openai_api_key)
def get_embedding(text):
    embeddings = openai_embeddings.embed_documents(text_chunks)
    return embeddings

# שמירת שיר ב־Pinecone
def store_song(user_id, song_id, embedding, metadata):
    index.upsert(vectors=[{
        "id": f"{user_id}:{song_id}",
        "values": embedding,
        "metadata": metadata
    }])

# חיפוש שירים דומים
def search_similar_songs(user_id, query_text, top_k=5):
    query_embedding = get_embedding(query_text)
    results = index.query(
        vector=query_embedding,
        top_k=top_k,
        include_metadata=True,
        filter={"user_id": user_id}
    )
    return results["matches"]

app = FastAPI()

@app.post("/process-audio/")
async def process_audio(user_id: str, song_id: str, file: UploadFile):
    file_path = f"/tmp/{uuid.uuid4()}.mp3"
    with open(file_path, "wb") as f:
        f.write(await file.read())
    
    raw_text = transcribe_audio(file_path)
    lyrics = extract_lyrics(raw_text)
    analysis = analyze_song_content(lyrics)
    
    full_text = lyrics + "\n" + analysis
    embedding = get_embedding(full_text)
    
    metadata = {"user_id": user_id, "song_id": song_id, "lyrics": lyrics, "analysis": analysis}
    store_song(user_id, song_id, embedding, metadata)
    
    return {"message": "שיר נשמר בהצלחה", "lyrics": lyrics, "analysis": analysis}

@app.get("/search-similar/")
def search_similar(user_id: str, query: str):
    matches = search_similar_songs(user_id, query)
    return matches
